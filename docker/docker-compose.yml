# Docker Compose untuk Backend IoT Kolam Ikan

services:
  # MQTT Broker untuk komunikasi sensor
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: kolam_mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt/config:/mosquitto/config:rw
      - ./mqtt/data:/mosquitto/data:rw
      - ./mqtt/log:/mosquitto/log:rw
    networks:
      - kolam_network
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t test -m 'health check'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database TimeSeries untuk data sensor
  influxdb:
    image: influxdb:2.7
    container_name: kolam_influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=kolam-org
      - DOCKER_INFLUXDB_INIT_BUCKET=sensor-data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-auth-token
    volumes:
      - ../data/influxdb:/var/lib/influxdb2:rw
    networks:
      - kolam_network
    healthcheck:
      test: ["CMD-SHELL", "influx ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  api_server:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: kolam_api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-super-secret-auth-token
      - INFLUXDB_ORG=kolam-org
      - INFLUXDB_BUCKET=sensor-data
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - ./backend/.env
    depends_on:
      mosquitto:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app:rw
      - /app/node_modules
      - ./backend/logs:/app/logs:rw
    networks:
      - kolam_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis untuk caching dan real-time data
  redis:
    image: redis:7-alpine
    container_name: kolam_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - ../data/redis:/data:rw
    networks:
      - kolam_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana untuk monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: kolam_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ../data/grafana:/var/lib/grafana:rw
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      influxdb:
        condition: service_healthy
    networks:
      - kolam_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: kolam_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api_server
      - grafana
    networks:
      - kolam_network
    profiles:
      - production

volumes:
  influxdb_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local

networks:
  kolam_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16